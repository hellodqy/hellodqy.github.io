var tipuesearch = {"pages":[{"title":"Hexo集成Algolia实现网站搜索引擎","url":"/post/fe591630.html","text":"尝试一晚终于找到一个可行的办法 创建 Alogolia Index首先登陆进入 Algolia 官网，我们可以使用 GitHub 或 Google 帐号登录。 配置API Key 接下来我们需要配置 Algolia——API Keys 到我们自己的 hexo 站点中，关联两者，使得 Algolia 能够搜集我们 hexo 站点的数据通过 API 发送给 Aloglia 回到首页打开API Keys，其中的 Application ID 、Search-Only API Key、Admin API KEY信息将会被用到 首先我们需要修改Blog根目录下的 _config.yml，进行以下配置： 1234algolia: applicationID: &#x27;你的Applicaiton ID&#x27; apiKey: &#x27;你的Search-Only API Key&#x27; indexName: &#x27;创建的索引名称&#x27; 然后我们需要配置一个名称为 HEXO_ALGOLIA_INDEXING_KEY，内容为 Alogolia 网页中 Admin API KEY 的环境变量，在Blog根目录下进行Git Bash并输入下列命令： 1export HEXO_ALGOLIA_INDEXING_KEY=你的Admin API KEY 通过 Hexo Aloglia 获取站点数据前面我们创建了 Index，但是此时为空，不包含任何数据。我们需要安装 Hexo Aloglia 扩展，这个扩展的功能是搜集站点的内容并通过 API 发送给 Aloglia 1npm install --save hexo-algolia 安装完成后，在 hexo 站点根目录下执行下列命令来搜集数据更新到我们刚创建的 Index 中： 1hexo algolia 如上图所示则代表成功将 hexo 站点中的数据发送到了 Alogolia 的 Index 中，我们可以在网页中看到所有的数据 主题集成Algolia：更改主题配置文件的 _config.yml(注意是主题配置文件的_config.yml，我的是Blog&#x2F;themes&#x2F;butterfly目录下的，不是Blog根目录的_config.yml)，找到 Algolia Search 配置部分(文件当中有，直接搜索)，将enable 改为true 即可： 12345# Algolia searchalgolia_search: enable: true hits: per_page: 6 重新部署1hexo cl &amp;&amp; hexo g &amp;&amp; hexo s 注意：每次对网站内容修改以后都需要更新Algolia1hexo algolia","tags":""},{"title":"博客美化与文章发布","url":"/post/8f1335fc.html","text":"Typora下载与配置下载与破解教程：Typora 1.4.8 – 2022最新Typora破解激活教程！你的Markdown编辑器！ - 郭炫韩Coding - 博客园 (cnblogs.com) Butterfly 主题安装1git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly 这里面如果报错，如下图所示 执行下列命令： 12git config --global --unset http.proxy git config --global --unset https.proxy 应用主题Blog根目录下找到_config.yml文件 搜索找到theme，将landscape改为butterfly 安装插件如果你没有 pug 以及 stylus 的渲染器，请下载安装： 1npm install hexo-renderer-pug hexo-renderer-stylus --save 文件夹介绍 _config.yml：俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面改。 node_modules:存储Hexo插件的文件，可以实现各种扩展功能。一般不需要管。 scaffolds：模板文件夹，里面的post.md文件可以设置每一篇博客的模板。具体用起来就知道能干嘛了。 source：非常重要。所有的个人文件都在里面！ themes：主题文件夹，可以从Hexo主题官网或者网上大神的Github主页下载各种各样美观的主题，让自己的网站变得逼格高端的关键！ 生成新文章1npm i hexo-deployer-git 1hexo new post &quot;新建博客文章名&quot; 1hexo cl &amp;&amp; hexo g &amp;&amp; hexo s 发布博客 清理静态缓存 1hexo cl 生成 1hexo g 本地部署 1hexo s ​ 部署以后打开一个浏览器，在网址栏输入localhost:4000&#x2F;即可看到网站更新 部署到Github 1hexo d 博客美化背景图片参考网址： https://wallhaven.cc/ https://wall.alphacoders.com/ https://bz.zzzmh.cn/index 关键页面生成：http://haiyong.site/post/cda958f2.html 网站美化：http://haiyong.site/post/22e1d5da.html 网站设置在线评论：http://haiyong.site/post/17c68aa7.html#post-comment","tags":""},{"title":"Hexo+Github搭建个人博客","url":"/post/405e7e90.html","text":"啊~磕磕绊绊终于搭好了，分享一下我的搭建过程和遇到的问题与解决方案： 安装并配置Node.js注意： 没有需求千万不要安装cnpm！(参考文章第五步有一个按需安装cnpm) cmd全程使用管理员模式打开 参考文章：https://blog.csdn.net/weixin_52799373/article/details/123840137 cmd管理员模式下执行下述命令 1npm install -g hexo-cli 安装并配置Git这个没什么坑，照着教程做就好 Git教程：https://www.cnblogs.com/xueweisuoyong/p/11914045.html 创建Github仓库 呐，这里一定要注意，仓库名称一定得是你的Github用户名.github.io 例如：你的Github用户名叫做helloworld，那么仓库名称就应该设置为helloworld.github.io 另外，访问权限得设置成Public，设成Private不得行！ 生成Github SSH Token注意：生成的Token记得复制并保存下来 Expiration是这个Token的使用期限，我偷懒就爱选择No expiration(永不过期) 权限全勾上就好 使用SSH Token 删除远程仓库地址 1git remote remove origin 检查是否删除成功 1git remote -v 没有输出证明删除成功 链接远程仓库 注意：不要直接复制，SSH密钥粘贴刚刚保存的Token，用户名和仓库名记得替换成你自己的 1git remote add origin https://SSH密钥@github.com/用户名/仓库名.git 完成后再次输入第二步的命令，看到fetch和pull的网址里面出现有生成SSH Token就设置成功了 1git remote -v 生成SSH Keys执行下述命令，提示选择y&#x2F;n就输入y，没有就一路回车 1ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; 找到密钥位置并复制 测试ssh是否绑定成功 1ssh -T git@github.com 如果问你yes&#x2F;no直接yes 本地访问博客 创建一个Blog文件夹并启用Git Bash Here 初始化hexo 1hexo init 这里折腾了好久，一直显示command not found，重装了好几次node.jx，分析应该是前面安装了cnpm导致hexo的存储位置被改掉了 解决：前面加一个npx就好了，还是不行的话就自行百度谷歌吧 这里使用npx hexo … 的话，以后所有hexo命令都需要加上npx 1npx hexo init 生成本地的hexo页面 1hexo s 访问 浏览器输入： 1http://localhost:4000/ ​ ctrl+c关闭服务器 上传Blog到Github修改-config.yml文件 打开该文件并修改内容： 1234deploy: type: git repository: 你的github地址 branch: main 安装hexo-deployer-git 自动部署发布工具1npm install hexo-deployer-git --save 生成页面 1hexo g 本地文件上传到Github 1hexo d 注意：中间会出现登录界面，复制前面生成的SSH Token粘贴进去就好 注意：网络报错多次尝试就好 访问Github博客浏览器网址输入 1https://用户名.github.io/ 这一步折腾最久，做好的html网页传到Github后，用户名.github.io打不开，报错404，如图 解决：一开始试了很多网上的办法，比如点击页面中间的read the full documention然后跟着里面的步骤操作，没有效果，但是检查了很多遍仓库配置都没有问题，后来发现只是workflow一直没有启动，刷新一下仓库配置就可以了 打开.github.io仓库并点击Setiings 点击右侧菜单的Pages并重新选择Source和Branch，我当时配置是对的就没有改，但是保持原来的配置只是重新选择并保存一下可以刷新配置，邮箱就收到workflow启用的邮件了~ 博客搭建完毕~","tags":""},{"url":"","text":"","tags":"","title":""},{"url":"","text":"","tags":"","title":""}]}